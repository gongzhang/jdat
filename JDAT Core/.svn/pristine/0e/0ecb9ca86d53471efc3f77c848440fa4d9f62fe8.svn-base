package cn.edu.buaa.sei.jdat.model;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Jar Dependency Analysis Toolkit
//  @ File Name : Method.java
//  @ Date : 2012/1/13
//  @ Author : 
//
//

public class Method extends Member {
	private TypeDelegator returnType;
	private TypeDelegator[] argumentTypes;
	private boolean returnTypeIsArray;
	private boolean[] argumentTypesIsArray;

	public Method(int argSize) {
		this.argumentTypes = new TypeDelegator[argSize];
		argumentTypesIsArray = new boolean[argSize];
	}
	
	@Override
	public String getSignature() {
		StringBuffer sb = new StringBuffer();
		sb.append(this.getOwner().getSignature()).append('.').append(this.getName());
		sb.append('(');
		if (this.argumentTypes.length > 0) {
			sb.append(argumentTypes[0].getTypeSignature());
			for (int i = 1; i < this.argumentTypes.length; i++) {
				sb.append(',').append(argumentTypes[i].getTypeSignature());
			}
		}
		sb.append(')');
		sb.append(':').append(this.returnType.getTypeSignature());
		return null;
	}
	
	public void setReturnTypeDelegator(TypeDelegator delegator) {
		this.returnType = delegator;
	}
	
	public Type getReturnType() {
		return returnType.getType();
	}
	
	public void setArgumentTypeDelegator(TypeDelegator delegator, int loc) {
		argumentTypes[loc] = delegator;
	}
	
	public Type[] getArguments() {
		Type[] types = new Type[argumentTypes.length];
		for (int i = 0; i < argumentTypes.length; i++)
			types[i] = argumentTypes[i].getType();
		return types;
	}
	
	public int getArgumentSize() {
		return argumentTypes.length;
	}
	
	public Type getArgument(int loc) {
		return argumentTypes[loc].getType();
	}
	
	public String getReturnTypeSignature() {
		return returnType.getTypeSignature();
	}
	
	public String getReturnTypeName() {
		return returnType.getTypeName();
	}
	
	public String[] getArgumentSignatures() {
		String[] names = new String[argumentTypes.length];
		for (int i = 0; i < argumentTypes.length; i++)
			names[i] = argumentTypes[i].getTypeSignature();
		return names;
	}
	
	public String[] getArgumentNames() {
		String[] names = new String[argumentTypes.length];
		for (int i = 0; i < argumentTypes.length; i++)
			names[i] = argumentTypes[i].getTypeName();
		return names;
	}
	
	public String getArgumentSignature(int loc) {
		return argumentTypes[loc].getTypeSignature();
	}
	
	public String getArgumentName(int loc) {
		return argumentTypes[loc].getTypeName();
	}
	
	public boolean isReturnArray() {
		return this.returnTypeIsArray;
	}
	
	public void setReturnArray(boolean isArray) {
		this.returnTypeIsArray = isArray;
	}
	
	public boolean isArgumentArray(int loc) {
		return this.argumentTypesIsArray[loc];
	}
	
	public void setArgumentArray(boolean isArray, int loc) {
		this.argumentTypesIsArray[loc] = isArray;
	}
	
	public boolean isConstructor() {
		return (getName().equals("<init>") || getName().equals("<clinit>"));
	}
	
}
