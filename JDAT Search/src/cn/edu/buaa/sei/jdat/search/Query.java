package cn.edu.buaa.sei.jdat.search;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import cn.edu.buaa.sei.jdat.search.exception.InvalidQueryException;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Jar Dependence Analysis
//  @ File Name : Query.java
//  @ Date : 2012/1/13
//  @ Author : 
//
//




public class Query {
	private String queryString;
	private int options;
	
	@Deprecated
	public static final int OPT_PACKAGE = 0x0001;
	@Deprecated
	public static final int OPT_CLASS = 0x0002;
	@Deprecated
	public static final int OPT_INTERFACE = 0x0004;
	@Deprecated
	public static final int OPT_FIELD = 0x0008;
	@Deprecated
	public static final int OPT_METHOD = 0x0010;
	@Deprecated
	public static final int OPT_TYPE = 0x0006;
	@Deprecated
	public static final int OPT_MEMBER = 0x0018;
	@Deprecated
	public static final int OPT_ALL = 0x001F;
	
	public static final int OPT_SEARCH_IN_RESULT = 0x0100;
	public static final int OPT_REGEX = 0x0200;
	private HashMap<String, IndexItem> lastResult;
	
	private static final Pattern validQueryRegex = Pattern.compile("[\\w\\$\\.]+");
	
	public Query() {
		lastResult = new HashMap<String, IndexItem>();
	}
	
	public String get() {
		return queryString;
	}
	
	
	public void set(String queryString) {
		this.queryString = queryString;
	}
	
	public Pattern getRegex() {
		Pattern regex = null;
		if (isOptionFlagged(OPT_REGEX)) {
			try {
				regex = Pattern.compile(queryString);
			} catch (PatternSyntaxException e) {
				regex = null;
			}
		}
		return regex;
	}
	
	public int getOptions() {
		return options;
	}
	
	public HashMap<String, IndexItem> getLastResult() {
		return lastResult;
	}
	
	protected void addLastResult(IndexItem item) {
		lastResult.put(item.getFullName(), item);
	}
	
	protected void newLastResult() {
		this.lastResult.clear();
	}
	
	public void validate() throws InvalidQueryException {
		if (!isOptionFlagged(OPT_REGEX)) {
			Matcher matcher = validQueryRegex.matcher(queryString);
			if (!matcher.matches())
				throw new InvalidQueryException(queryString, InvalidQueryException.WARNING);
		}
		if (isOptionFlagged(OPT_REGEX)) {
			try {
				Pattern.compile(queryString);
			} catch (PatternSyntaxException e) {
				throw new InvalidQueryException(queryString, InvalidQueryException.ERROR);
			}
		}
	}
	
	public void applyOption(int option) {
		this.options |= option;
	}
	
	public void cancelOption(int option) {
		this.options &= ~option;
	}
	
	public boolean isOptionFlagged(int option) {
		return (this.options & option) != 0;
	}
}
