package cn.edu.buaa.sei.jdat.graph;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import cn.edu.buaa.sei.jdat.model.Jar;
import cn.edu.buaa.sei.jdat.model.Package;
import cn.edu.buaa.sei.jdat.model.Type;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Jar Dependency Analysis Toolkit
//  @ File Name : DependencyGraph.java
//  @ Date : 2012/1/13
//  @ Author : 
//
//

public class DependencyGraph {
	
	public static final int OPT_EXTERNAL_JARS = 0x0001;
	public static final int OPT_UNKNOWN_PACKAGES = 0x0002;
	
	private static final boolean gen_blend_dependencies = false;
	
	private HashMap<String, JarDependency> internalDependencies;
	private HashMap<String, JarDependency> externalDependencies;
	private HashMap<String, BlendDependency> unknownPkgDependencies;
	
	private Jar unknownJar;
	private HashMap<String, Package> unknownPackages;
	private HashMap<String, Type> unknownTypes;
	
	private Set<Jar> internalJars;
	private Set<Jar> externalJars;
	
	private int options;
	
	static String getKey(Object entity, Object refer) {
		return String.format("%s%s", Integer.toHexString(entity.hashCode()), Integer.toHexString(refer.hashCode()));
	}
	
	public DependencyGraph(Jar[] jars) {
		this(jars, OPT_EXTERNAL_JARS | OPT_UNKNOWN_PACKAGES);
	}
	
	public DependencyGraph(Jar[] jars, int opt) {
		options = opt;
		
		internalJars = new HashSet<Jar>();
		internalDependencies = new HashMap<String, JarDependency>();
		
		if ((options & OPT_EXTERNAL_JARS) != 0) {
			externalJars = new HashSet<Jar>();
		}
		
		if ((options & OPT_UNKNOWN_PACKAGES) != 0) {
			unknownJar = Jar.createUnknownJar();
			unknownPackages = new HashMap<String, Package>();
			unknownTypes = new HashMap<String, Type>();
			if (gen_blend_dependencies)
				unknownPkgDependencies = new HashMap<String, BlendDependency>();
		}
		
		if ((options & OPT_EXTERNAL_JARS) != 0 || (options & OPT_UNKNOWN_PACKAGES) != 0)
			externalDependencies = new HashMap<String, JarDependency>();
		
		for (Jar jar : jars)
			internalJars.add(jar);
		
		for (Jar jar : jars) {
			for (Jar jref : jar.getReferences()) {
				if (!internalJars.contains(jref) && (options & OPT_EXTERNAL_JARS) != 0) {
					externalJars.add(jref);
					externalDependencies.put(getKey(jar, jref), new JarDependency(jar, jref));
				} else {
					internalDependencies.put(getKey(jar, jref), new JarDependency(jar, jref));
				}
			}
			for (Jar jiref : jar.getInverseReferences()) {
				if (!internalJars.contains(jiref) && (options & OPT_EXTERNAL_JARS) != 0) {
					externalJars.add(jiref);
					externalDependencies.put(getKey(jiref, jar), new JarDependency(jiref, jar));
				}
			}
			
			if ((options & OPT_UNKNOWN_PACKAGES) != 0)
			{
				JarDependency jdep = new JarDependency(jar, unknownJar);
				
				// dependency between internal jars and unknown packages.
				for (Package pkg : jar.getPackages()) {
					String[] unknownPackageNames = pkg.getUnresolvedReferenceNames();
					
					for (String pref : unknownPackageNames) {
						// add unknown package
						Package refer = unknownPackages.get(pref);
						if (refer == null) {
							refer = Package.createUnknownPackage(pref);
							unknownPackages.put(pref, refer);
						}
						
						if (gen_blend_dependencies) {
							// add blend (jar to package) dependency
							String bkey = getKey(jar, refer);
							BlendDependency bdep = unknownPkgDependencies.get(bkey);
							if (bdep == null) {
								bdep = new BlendDependency(jar, refer);
								unknownPkgDependencies.put(bkey, bdep);
							}
						}
						// create package dependency
						jdep.addDependency(new PackageDependency(pkg, refer));
					}
				}
				
				if (jdep.getDependenciesCount() != 0)
					externalDependencies.put(getKey(jar, unknownJar), jdep);
			}
		}
	}
	
	public Jar[] getInternalJars() {
		return internalJars.toArray(new Jar[0]);
	}
	
	public Jar[] getExternalJars() {
		if ((options & OPT_EXTERNAL_JARS) == 0)
			return null;
		return externalJars.toArray(new Jar[0]);
	}
	
	public boolean isExternal(Jar jar) {
		if ((options & OPT_EXTERNAL_JARS) == 0)
			return false;
		return externalJars.contains(jar);
	}
	
	public Package[] getUnknownPackages() {
		if ((options & OPT_UNKNOWN_PACKAGES) == 0)
			return null;
		return unknownPackages.values().toArray(new Package[0]);
	}
	
	Map<String, Type> getUnknownTypes() {
		if ((options & OPT_UNKNOWN_PACKAGES) == 0)
			return null;
		return unknownTypes;
	}
	
	public JarDependency[] getInternalDependencies() {
		return internalDependencies.values().toArray(new JarDependency[0]);
	}
	
	public JarDependency[] getExternalDependencies() {
		if ((options & OPT_EXTERNAL_JARS) == 0 && (options & OPT_UNKNOWN_PACKAGES) == 0)
			return null;
		return externalDependencies.values().toArray(new JarDependency[0]);
	}
	
	public BlendDependency[] getUnknownPkgDependencies() {
		if ((options & OPT_UNKNOWN_PACKAGES) == 0)
			return null;
		return unknownPkgDependencies.values().toArray(new BlendDependency[0]);
	}
	
	public JarDependency getDependency(Jar jar, Jar ref) {
		String key = getKey(jar, ref);
		JarDependency dep = internalDependencies.get(key);
		if ((options & OPT_EXTERNAL_JARS) == 0 | dep != null)
			return dep;
		dep = externalDependencies.get(key);
		return dep;
	}
	
	public BlendDependency getDependency(Jar jar, Package pkg) {
		if (!gen_blend_dependencies && (options & OPT_UNKNOWN_PACKAGES) == 0)
			return null;
		String key = getKey(jar, pkg);
		return unknownPkgDependencies.get(key);
	}
	
	public boolean isOptionFlagged(int opt) {
		return (options & opt) != 0;
	}
	
	public Jar getUnknownJar() {
		return unknownJar;
	}
	
	public void generateReport(String url) {
	
	}
	
}
